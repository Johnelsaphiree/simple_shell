<<<<<<< HEAD
.
.TH man 05 "May 2022" "ALX-Holberton School" "0x16. C - Simple Shell"
.SH NAME
.B shellby\fR \- simple UNIX command interpreter
.SH SYNOPSIS
..B #include \(dqholberton.h\(dq
.sp
.B int hsh(void)
.SH DESCRIPTION
.B Overview
.sp
The simple shell is an application that reads lines from either a file or the
terminal, interprets them, and executes them. Users can interactively type directly
to the
running shell or pipe in shell scripts.
.sp
.B Invocation
.in +2n
\fBShellby\fR can be invoked both interactively and non-interactively.
If \fBshellby\fR is invoked with standard input not connected to a terminal, it reads and executes received commands in order.

If \fBshellby\fR is invoked with standard input connected to a terminal (determined by \fIisatty(3)\fR), an \fIinteractive\fR shell is opened.
When executing interactively, \fBshellby\fR displays the prompt \fI$ \fR when it is ready to read a command.

Alternatively, if command line arguments are supplied upon invocation, \fBshellby\fR treats the first argument as a file from which to read commands.
The supplied file should contain one command per line.
.B Shellby\fR runs each of the commands contained in the file in order before exiting.
.in

.B Environment
.in +2n
Upon invocation, \fBshellby\fR receives and copies the environment of the parent process in which it was exeucted.
This \fBenvironment\fR is an array of \fIname-value\fR strings describing variables in the format \fINAME=VALUE\fR.
.in

.B Command Execution
.in +2n
After receiving a command, \fBshellby\fR tokenizes it into words using \fB" "\fR as a delimiter.
The first word is considered the command and all remaining words are considered arguments to that command.
.B Shellby\fR then proceeds with the following actions:

.RS
1. If the first character of the command is neither a slash (\fI\\\fR) nor dot (\fI.\fR), the shell searches for it in the list of shell builtins.
If there exists a shell builtin by that name, the builtin is invoked.
.RE

.RS
2. If the first character of the command is none of a slash (\fI\\\fR), dot (\fI.\fR), nor builtin, \fBshellby\fR searches each element of the
\fBPATH\fR environmental variable for a directory containing an executable file by that name.
.RE

.RS
3. If the first character of the command is a slash (\fI\\\fR) or dot (\fI.\fR) or either of the above searches was successful,
the shell executes the named program with any remaining arguments given in a separate execution environment.
.RE

.B Exit Status
.in +2n
.B Shellby\fR returns the exit status of the last command executed, unless a syntax error occurs, with zero indicating success and non-zero indicating failure.

If a command is not found, the return status is 127; if a command is found but is not executable, the return status is 126.

All builtins return zero on success and one or two on incorrect usage (indicated by a corresponding error message).
.in

.B Signals
.in +2n
While running in interactive mode, \fBshellby\fR ignores the keyboard input \fBCtrl+c\fR.
Alternatively, an input of end-of-file (\fBCtrl+d\fR) will exit the program.
.in

.B Variable Replacement
.in +2n
.B Shellby\fR inerprets the \fI$\fR character for variable replacement:

.RS
.B $ENV_VARIABLE\fR	\fIENV_VARIABLE\fR is subsituted with its value.
.RE

.RS
.B $?\fR	\fI?\fR is substituted with the return value of the last program executed.
.RE

.RS
.B $$\FR	The second \fI$\fR is substituted with the current process ID.
.RE

.B Comments
.in +2n
.B Shellby\fR ignores all words and characters preceeded by a \fI#\fR character on a line.
.in

.B Operators
.in +2n

.RS
.B ;\fR - Command separator
.RS
Commands separated by a \fI;\fR are executed sequentially.
.RE

.B &&\fR - AND logical operator
.RS
.I command1\fR && \fIcommand2\fR: \fIcommand2\fR is executed if, and only if, \fIcommand1\fR returns an exit status of zero.
.RE

.B ||\fR - OR logical operator
.RS
.I command1\fR || \fIcommand2\fR: \fIcommand2\fR is executed if, and only if, \fIcommand1\fR returns a non-zero exit status.
.RE

The operators \fI&&\fR and \fI||\fR have equal precedence, followed by \fI;\fR.
.RE

.B Shellby Builtin Commands
.in +2n

.RS
.B cd
.RS
Usage: .B cd [DIRECTORY]

Changes the current directory of the process to \fBDIRECTORY\fR.

If no argument is given, the command is interpreted as \fBcd $HOME\fR.

If the argument \fB-\fR is given, the command is interpreted as \fBcd $OLDPWD\fR.

The environment variables \fBPWD\fR and \fBOLDPWD\fR are updated after a change of directory.
.RE

.B alias
.RS
Usage: \fBalias [NAME[='VALUE'] ...]\fR

Handles aliases.

.I alias\fR: Prints a list of all aliases, one per line, in the form \fINAME='VALUE'\fR.

.I alias NAME [NAME2 ...]\fR: Prints the aliases \fINAME\fR, \fINAME2\fR, etc. one per line, in the form \fINAME='VALUE'\fR.

.I alias NAME='VALUE' [...]\fR: Defines an alias for each \fINAME\fR whose \fIVALUE\fR is given.
If \fIname\fR is already an alias, its value is replaced with \fIVALUE\fR.
.RE

.B exit
.RS
Usage: \fBexit [STATUS]\fR

Exits the shell.

The \fBSTATUS\fR argument is the integer used to exit the shell.

If no argument is given, the command is interpreted as \fBexit 0\fR.
.RE

.B env
.RS
Usage: \fBenv\fR

Prints the current environment.
.RE

.B setenv
.RS
Usage: \fBsetenv [VARIABLE] [VALUE]\fR

Initializes a new environment variable, or modifies an existing one.

Upon failure, prints a message to \fBstderr\fR
.RE

.B unsetenv
.RS
Usage: \fBunsetenv [VARIABLE]\fR

Removes an environmental variable.

Upon failure, prints a message to \fBstderr\fR.
.RE
.RE
.in

.SH SEE ALSO
access(2), chdir(2), execve(2), _exit(2), exit(3), fflush(3), fork(2), free(3), isatty(3), getcwd(3), malloc(3), open(2), read(2), sh(1), signal(2), stat(2), wait(2), write(2)

.B Shellby\fR emulates basic functionality of the \fBsh\fR shell.
This man page borrows from the corresponding man pages sh(1) and dash(1).
.SH AUTHOR
Johnel Okon and Esi Ogagaoghene Esi
.SH SEE ALSO
.BR sh (1)
=======
B.\"Manpage for simple shell 
.\"Created by Caleb Nyong and Matthew Lawrence

.TH SODASH 1 "May 18 2022" "SODA SHELL - Simple Shell man page"

.SH NAME
sodash\fR \- simple UNIX command interpreter

.SH SYNOPSIS
soda\fR [\fIfilename\fR]

.SH COPYRIGHT
soda is Copyright (C) 2022 by Caleb Nyong and Matthew Lawrence

.SH DESCRIPTION
Soda\fR is a sh-compatible command language interpreter that executes commands read from the standard input or from a file.

.SH ARGUMENTS
If arguments remain after option processing, the first argument is assumed to be the name of a file containing shell commands. Sodash reads and executes commands from this file, then exits. Sodash exit status is the exit status of the last command executed in the script. If no commands are executed, the exit status is 0. An attempt is first made to open the file in the current directory, and, if no file is found, then the shell searches the directories in PATH for the script.

.SH INVOCATION
Sodash is started with the standard input connected to the terminal (as determined by \fIisatty(3)\fR), the interactive mode is executed. Also non-interactively option can be executed.
When Sodash is executed interactively, the prompt is displayed  \fI^-^ \fR to read any command, the command line argument is invoked and is treated as the first argument.

.SH DEFINITIONS
The following definitions are used throughout the rest of this document.

- \fIblank\fR

A space or tab.

- \fIword\fR

A sequence of characters considered as a single unit by the shell. Also known as a token\fR.

- \fIname\fR

A word consisting only of alphanumeric characters and underscores, and beginning with an alphabetic character or an underscore. Also referred to as an identifier\fR.

control operator\fR
A token that performs a control function. It is one of the following symbols:
|| & && ; ;;

.SH Command Execution
After a command has been split into words, if it results in a simple command and an optional list of arguments, the following actions are taken.

If the command name contains no slashes, the shell attempts to locate it. If there exists a shell function by that name, that function is invoked. If the name does not match a function, the shell searches for it in the list of shell builtins. If a match is found, that builtin is invoked.

If the name is neither a shell function nor a builtin, and contains no slashes, \fISodash\fR searches each element of the \fIPATH\fR for a directory containing an executable file by that name. \fISodash\fR uses a hash table to remember the full pathnames of executable files. A full search of the directories in \fIPATH\fR is performed only if the command is not found in the hash table. If the search is unsuccessful, the shell searches for a defined shell function named "command not found". If that function exists, it is invoked with the original command and the original command's arguments as its arguments, and the function's exit status becomes the exit status of the shell. If that function is not defined, the shell prints an error message and returns an exit status of 127.

If the search is successful, or if the command name contains one or more slashes, the shell executes the named program in a separate execution environment. Argument 0 is set to the name given, and the remaining arguments to the command are set to the arguments given, if any.

.SH Environment
\fBSodash\fR takes a copy from \fBBash\fR environment of the parent process where it was executed. The environment is an array of strings containing the variables in the format.
When a program is invoked it is given an array of strings called the environment. This is a list of name-value pairs, of the form name=value.

The shell provides several ways to manipulate the environment. On invocation, the shell scans its own environment and creates a parameter for each name found, automatically marking it for export to child processes. Executed commands inherit the environment. The export and declare -x commands allow parameters and functions to be added to and deleted from the environment.

.SH Exit Status
Sodash\fR exit status of an executed command is the value returned by the waitpid system call or equivalent function. A command which exits with a zero exit status has succeeded. An exit status of zero indicates success. A non-zero exit status indicates failure.

If a command is not found, the child process created to execute it returns a status of 127.

All builtins return zero on success and one or two on incorrect usage (indicated by a corresponding error message).

.SH BUILTINS
The following builtin commands are supported:

.B env

- Print the current enviroment

.B setenv [Variable] [Value]

- Creates a new environment variab;e or modifies an existing one.

.B unsetenv [Variable]

- Removes an environmental variable.

.B exit [Status]

- Exit the shell

.B cd [Directory]

- Changes the current directory of the process to DIRECTORY.  If no argument is given, the command is interpreted as cd $HOME. If the argument - is given, the command is interpreted as cd $OLDPWD. The environment variables PWD and OLDPWD are updated after a change of directory.

.B help

- Print help message of builtin command

.SH SEE ALSO
access(2), chdir(2), execve(2), _exit(2), exit(3), fflush(3), fork(2), free(3), isatty(3), getcwd(3), malloc(3), open(2), read(2), sh(1), signal(2), stat(2), wait(2), write(2)
Sodash\fR takes basic functionality of the \fBsh\fR shell. This man page is based on the man page bash(1)

.SH AUTHORS
Caleb Nyong & Matthew Lawrence
>>>>>>> 7cde2e64d64425bad0e51c2871ad5a973a19c6fb
